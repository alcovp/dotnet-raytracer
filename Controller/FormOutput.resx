<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAA
        AAAhISH/ISEh/yAdHf8hISH/ISEh/yEhIf8hHx//Hx4e/x8fH/8fHx//Hx8f/yAfH/8gIB//ICAg/yAg
        IP8gICD/ICAg/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIv8iIyP/IyMj/yEg
        IP8fHR3/HRsb/xsaGv8aGhr/HBwc/yEhIf8hISH/ISEh/yEhIf8gICD/Hx8f/yEhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yIiIv8iIyP/IyIi/yAd
        Hf8bFxf/FxYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FRYW/xQUFP8VFRX/Ghoa/yAgIP8gICD/ICAg/x8f
        H/8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8iIiL/JSQk/yId
        Hf8cGBj/FxYW/xYWFv8WFhb/FhYW/xYWFv8WFhb/FxcX/xcXF/8XFxf/FxcX/xYWFv8VFRX/FBQU/xsb
        G/8hISH/ICAg/x8fH/8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hIiL/IiMj/yck
        JP8iGxv/GhgY/xYXF/8XFxf/GBcX/xgXF/8YFxf/FxcX/xcXF/8WFhb/FhYW/xcXF/8XFxf/FxcX/xYW
        Fv8VFRX/FRUV/xYWFv8gICD/ICAg/x8fH/8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yIj
        I/8pJSX/Ixoa/xoYGP8XFxf/GhgY/xwZGf8dGRn/HRkZ/xwZGf8bGBj/GhgY/xgXF/8WFhb/FhYW/xcX
        F/8XFxf/FxcX/xcXF/8WFhb/FRUV/xUVFf8fHx//ICAg/x8fH/8hISH/ISEh/yEhIf8hISH/ISEh/yEh
        If8hIiL/KiYm/yQbG/8bGRn/GBcX/xwZGf8eGhr/IBoa/yEbG/8hGxv/IBsb/x8aGv8eGRn/HBkZ/xkY
        GP8XFhb/FhYW/xcXF/8XFxf/FxcX/xcXF/8WFhb/FRUV/xUVFf8gICD/ICAg/yEhIf8hISH/ISEh/yEh
        If8hISH/IiIi/yooKP8oHR3/IBoa/xwZGf8dGRn/IBsb/yIcHP8kHBz/JRwc/yUcHP8kHBz/Ixwc/yIb
        G/8fGhr/HBkZ/xkYGP8WFhb/FhcX/xcXF/8XFxf/FxcX/xcXF/8WFhb/FRUV/xYWFv8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8lJib/LCIi/yQcHP8hGxv/JBwc/yQdHf8lHR3/Jx4e/ykeHv8pHh7/KR4e/yke
        Hv8nHR3/JR0d/yMcHP8gGhr/HBkZ/xgXF/8WFhb/FxcX/xcXF/8XFxf/FxcX/xcXF/8VFRX/FRUV/xsb
        G/8gICD/ISEh/yEhIf8hISH/ISEh/ysoKP8pHR3/JR0d/ygeHv8qHx//LB8f/ywfH/8rHx//LSAg/y8g
        IP8vICD/LSAg/ywfH/8pHh7/Jh0d/yMcHP8fGhr/GhcX/xYWFv8XFxf/FhcX/xYWFv8WFhb/FhYW/xcX
        F/8VFRX/FBQU/yAgIP8hISH/ISEh/yIiIv8jJCT/LiQk/ykeHv8qHx//LSAg/zAhIf8yIiL/NCMj/zQj
        I/8zIyP/NSMj/zUjI/8zIyP/MSIi/y4gIP8qHh7/Jh0d/yEbG/8bGRn/FhYW/xYWFv8WFhb/FhYW/xYX
        F/8WFhb/FhYW/xcXF/8VFRX/Gxsb/yEhIf8hISH/JCQk/yopKf8tICD/LCAg/zAhIf8zIiL/NiQk/zkl
        Jf88Jib/Pigo/z4pKf89KCj/PSgo/zwnJ/84JSX/NCMj/y4hIf8pHh7/Ihwc/xsYGP8WFxf/FxcX/xoY
        GP8cGRn/Hhoa/x0ZGf8aGBj/FxYW/xUWFv8WFhb/Hx8f/yEhIf8kJCT/LScn/y4gIP8vISH/MyMj/zck
        JP88Jyf/QCkp/0UtLf9KMDD/TTIy/00zM/9HMDD/RS8v/0ArK/85Jyf/MSMj/ykfH/8fGhr/FxcX/x0a
        Gv8iHR3/Jh4e/ygfH/8oHx//Jh4e/yEbG/8bGRn/FxcX/xQUFP8fHx//ISEh/yMkJP8wJib/LyEh/zMj
        I/83JCT/PCcn/0IrK/9JLy//UTU1/1k7O/9gQED/ZEND/15AQP9JNzf/QTEx/zgrK/8sIyP/Hhwc/xcY
        GP8fHBz/Jh8f/y4jI/8zJib/Nygo/zYoKP8yJSX/KyEh/yMdHf8aGBj/FRUV/xwcHP8hISH/JSYm/zEl
        Jf8xISH/NiQk/zsmJv9BKir/STAw/1M3N/9fQED/bEpK/3hSUv+AWFj/flhY/2ZMTP9bRET/Tjo6/z0u
        Lv8rIyP/Hh0d/ykiIv8wJSX/Nyoq/0QxMf9MNjb/SjQ0/0IvL/83KCj/LCEh/x8bG/8WFRX/Ghoa/yEh
        If8mJyf/MyUl/zMjI/84JSX/Pygo/0YuLv9RNjb/X0BA/3BOTv+CXFz/k2lp/6Bycv+idHT/i2ho/31d
        Xf9rTk7/VD4+/z0uLv8sJSX/NCgo/z8tLf9MNzf/XEBA/2VFRf9fQkL/Uzo6/0MwMP81Jyf/HRoa/xYX
        F/8aGRn/ISEh/yYnJ/80JSX/NSMj/zsmJv9CKir/TDEx/1k8PP9rSkr/gFtb/5dubv+ugID/wY6O/8mS
        kv+whob/n3d3/4ZjY/9qTU3/TTk5/zgtLf8+Ly//TTY2/2FERP92UVH/flZW/3VQUP9iRET/TTY2/z4u
        Lv8wKyv/FhUV/xoaGv8hISH/JScn/zQnJ/82JCT/PCcn/0QsLP9QNDT/X0FB/3RSUv+OaGj/qn9//8eV
        lf/epKT/56mp/8+dnf+7jY3/nnV1/3xbW/9aQkL/QTQ0/0c1Nf9ZPj7/c09P/4lcXP+QYGD/hVpa/21L
        S/9VOzv/Pyws/ywjI/8VFRX/HBsb/yEhIf8kJSX/Mygo/zgkJP89KCj/Ri0t/1I2Nv9kRET/e1hY/5dw
        cP+3ior/1aGh/+Snp//0qqr/1Kmp/86mpv+vior/iWxs/2NPT/9HPDz/TD09/2BJSf98X1//kGlp/5Vn
        Z/+KXFz/cU1N/1Y8PP9ALS3/KCAg/xUWFv8eHR3/ISEh/yQlJf8wKSn/OCUl/z0oKP9GLi7/Uzc3/2VF
        Rf99WVn/mnJy/7uNjf/Yo6P/6KWl//W8vP/kwMD/2Le3/7ufn/+VfX3/b11d/1JISP9IPDz/XklJ/3tf
        X/+Tb2//lnBw/4dnZ/9qT0//Ujs7/z0sLP8iHR3/FhUV/yAgIP8hISH/JiYm/ywrK/84JCT/PScn/0Ut
        Lf9SNjb/Y0ND/3pWVv+Wbm7/toiI/9adnf/mt7f//MzM/+bBwf/PsrL/sZeX/455ef9qXFz/U0lJ/0g8
        PP9MPT3/a1RU/4JjY/+GZWX/dVhY/11HR/9IODj/NSoq/xkZGf8bGBj/ISEh/yEhIf8mJib/Jygo/zcn
        J/88Jyf/Qyws/08zM/9ePz//c1BQ/4xkZP+penr/wZub/+a+vv/xxMT/2Lm5/7WgoP+ah4f/emxs/1pS
        Uv9MRET/RDo6/zsxMf9LPDz/ZE5O/2ZOTv9cRkb/Szo6/zsvL/8oISH/FhYW/yEeHv8gICH/ISEh/ycn
        J/8lJib/MSsr/zslJf9AKir/SjAw/1c6Ov9pR0f/fldX/5Fxcf+ujo7/wZ2d/8mkpP+xmZn/mIeH/4Jz
        c/9oXV3/T0hI/0M9Pf8/Nzf/OzEx/zYsLP9BNDT/Szs7/0Q1Nf85Li7/LiYm/xoYGP8cGBj/IyMj/yAg
        IP8hISH/JiYm/yYmJv8nKSn/OCgo/z0nJ/9FLCz/TzQ0/149Pf9qUFD/gGdn/5Bzc/+dfn7/n4KC/415
        ef+CcHD/cWFh/15RUf9KQUH/OzU1/zkyMv82LS3/Myoq/y4mJv8wKCj/MCcn/yojI/8eHBz/GhcX/yMf
        H/8iIyP/Hh4e/yEhIf8hISH/JCQk/yUmJv8uKyv/OyYm/z8pKf9HLS3/Tjk5/15JSf9qUlL/dVxc/3xj
        Y/96Y2P/b15e/2lYWP9eT0//T0RE/0E4OP8zLy//MSws/zAqKv8tJyf/KiQk/yMfH/8oJSX/Hx0d/xoX
        F/8jHBz/JCQk/yEhIf8eHh7/ISEh/yEhIf8hISH/JiYm/yUmJv8zKyv/PCYm/z8qKv9HNzf/Tz09/1dD
        Q/9eSUn/Yk1N/1tLS/9YSkr/U0ZG/0w/P/9CODj/ODEx/y4qKv8qJyf/KSUl/ycjI/8kICD/Hx0d/xoZ
        Gf8bGBj/Ixsb/yYkJP8iIiL/IiIi/x0eHv8hISH/ISEh/yEhIf8jIyP/JiYm/yYnJ/80Kyv/PCUl/z8r
        K/9DNDT/SDg4/0s7O/9LPDz/RTo6/0Q6Ov9CNzf/PTQ0/zYvL/8vKir/Kicn/ygkJP8lIiL/IiAg/x8e
        Hv8dHBz/IBsb/yUbG/8pJib/IiIi/yEhIf8gISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/IyMj/yYn
        J/8zLCz/OyUl/z0oKP8/MDD/PjIy/zgwMP8yLi7/NS4u/zMtLf8tKCj/Kicn/ykmJv8nJCT/JSIi/yMh
        If8iICD/Ih4e/yUcHP8oHh7/Kicn/yIiIv8jIyP/ICAg/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEh
        If8hISH/IyMj/yUmJv8uKyv/OScn/zskJP88KSn/PS4u/zgtLf8yKyv/LCcn/1hLS/85MzP/JyMj/ygk
        JP8pIyP/KSIi/ykfH/8pHR3/LCMj/ykoKP8iIiL/IiIi/yIiIv8hISH/ISEh/yEhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/ISEh/yMjI/8nKSn/MSsr/zcnJ/85IyP/OSUl/zgnJ/83Jyf/MiUl/zIl
        Jf8xJCT/MCMj/y4gIP8tHx//LiQk/ysoKP8kJSX/IyMj/yIiIv8iIiL/ISEh/yEhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/JCQk/ywrK/8xKSn/NCcn/zQm
        Jv8zJSX/MiUl/zElJf8wJyf/LSgo/yopKf8lJSX/IiMj/yMjI/8iIiL/ISEh/yEhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/ISEh/yEhIf8hISH/JiYm/yQl
        Jf8kJSX/JSYm/yYnJ/8mJyf/JSYm/yMkJP8kJCT/JCQk/yQlJf8jIyP/IyMj/yIhIf8hISH/ISEh/yEh
        If8hISH/ISEh/yEhIf8hISH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>